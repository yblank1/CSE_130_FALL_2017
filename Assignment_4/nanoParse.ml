type token =
  | Num of (int)
  | Id of (string)
  | EOF
  | LET
  | EQ
  | IN
  | FUN
  | PLUS
  | MUL
  | AND
  | OR
  | LPAREN
  | RPAREN
  | SEMI
  | COLONCOLON

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano

let rec consAtTheEnd l e = match l with
  | NilExpr       -> Bin (e, Cons, NilExpr)
  | Bin(h, op, t) -> Bin (h, op,   consAtTheEnd t e)
# 29 "nanoParse.ml"
let yytransl_const = [|
    0 (* EOF *);
  259 (* LET *);
  260 (* EQ *);
  261 (* IN *);
  262 (* FUN *);
  263 (* PLUS *);
  264 (* MUL *);
  265 (* AND *);
  266 (* OR *);
  267 (* LPAREN *);
  268 (* RPAREN *);
  269 (* SEMI *);
  270 (* COLONCOLON *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  258 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\005\000\
\005\000\006\000\006\000\007\000\007\000\008\000\008\000\009\000\
\009\000\010\000\010\000\011\000\011\000\000\000"

let yylen = "\002\000\
\001\000\006\000\001\000\003\000\001\000\003\000\001\000\003\000\
\001\000\003\000\001\000\003\000\001\000\003\000\001\000\002\000\
\001\000\001\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\018\000\000\000\000\000\022\000\001\000\000\000\
\000\000\000\000\009\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
\000\000\019\000\000\000\000\000\008\000\000\000\010\000\000\000\
\000\000\000\000\002\000"

let yydgoto = "\002\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\014\000\015\000\000\000"

let yysindex = "\006\000\
\003\255\000\000\000\000\009\255\003\255\000\000\000\000\007\255\
\010\255\014\255\000\000\002\255\017\255\004\255\000\000\018\255\
\015\255\004\255\004\255\004\255\004\255\004\255\004\255\000\000\
\003\255\000\000\010\255\014\255\000\000\017\255\000\000\004\255\
\021\255\003\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\002\000\051\000\000\000\045\000\023\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\013\000\057\000\000\000\034\000\000\000\012\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\251\255\000\000\000\000\010\000\011\000\244\255\000\000\014\000\
\008\000\245\255\000\000"

let yytablesize = 325
let yytable = "\017\000\
\015\000\005\000\024\000\003\000\003\000\004\000\001\000\029\000\
\021\000\031\000\016\000\014\000\004\000\005\000\005\000\022\000\
\018\000\020\000\019\000\033\000\024\000\025\000\013\000\003\000\
\023\000\034\000\026\000\027\000\035\000\028\000\032\000\000\000\
\000\000\012\000\030\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\015\000\015\000\005\000\015\000\
\015\000\015\000\015\000\005\000\015\000\005\000\015\000\014\000\
\014\000\004\000\014\000\014\000\014\000\014\000\004\000\014\000\
\004\000\014\000\013\000\013\000\003\000\013\000\000\000\013\000\
\013\000\000\000\013\000\003\000\013\000\012\000\012\000\000\000\
\012\000\000\000\012\000\012\000\000\000\012\000\000\000\012\000\
\011\000\011\000\000\000\000\000\000\000\011\000\011\000\007\000\
\011\000\000\000\000\000\007\000\007\000\006\000\007\000\000\000\
\000\000\006\000\006\000\000\000\006\000"

let yycheck = "\005\000\
\000\000\000\000\014\000\001\001\001\001\003\001\001\000\020\000\
\007\001\022\000\002\001\000\000\000\000\011\001\011\001\014\001\
\010\001\004\001\009\001\025\000\032\000\004\001\000\000\000\000\
\008\001\005\001\012\001\018\000\034\000\019\000\023\000\255\255\
\255\255\000\000\021\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\005\001\005\001\007\001\
\008\001\009\001\010\001\010\001\012\001\012\001\014\001\004\001\
\005\001\005\001\007\001\008\001\009\001\010\001\010\001\012\001\
\012\001\014\001\004\001\005\001\005\001\007\001\255\255\009\001\
\010\001\255\255\012\001\012\001\014\001\004\001\005\001\255\255\
\007\001\255\255\009\001\010\001\255\255\012\001\255\255\014\001\
\004\001\005\001\255\255\255\255\255\255\009\001\010\001\005\001\
\012\001\255\255\255\255\009\001\010\001\005\001\012\001\255\255\
\255\255\009\001\010\001\255\255\012\001"

let yynames_const = "\
  EOF\000\
  LET\000\
  EQ\000\
  IN\000\
  FUN\000\
  PLUS\000\
  MUL\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  COLONCOLON\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp8) in
    Obj.repr(
# 24 "nanoParse.mly"
                                       ( _1 )
# 205 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 26 "nanoParse.mly"
                                       ( Let(_2,_4,_6) )
# 214 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp7) in
    Obj.repr(
# 28 "nanoParse.mly"
                                       ( _1 )
# 221 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 30 "nanoParse.mly"
                                       ( Bin(_1,Or,_3) )
# 229 "nanoParse.ml"
               : 'exp7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 31 "nanoParse.mly"
                                       ( _1 )
# 236 "nanoParse.ml"
               : 'exp7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 33 "nanoParse.mly"
                                       ( Bin(_1,And,_3) )
# 244 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 34 "nanoParse.mly"
                                       ( _1 )
# 251 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 36 "nanoParse.mly"
                                       ( Bin(_1,Eq,_3) )
# 259 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 38 "nanoParse.mly"
                                       ( _1 )
# 266 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 40 "nanoParse.mly"
                                       ( Bin(_1,Cons,_3) )
# 274 "nanoParse.ml"
               : 'exp54))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 41 "nanoParse.mly"
                                       ( _1 )
# 281 "nanoParse.ml"
               : 'exp54))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 43 "nanoParse.mly"
                                       ( Bin(_1,Plus,_3) )
# 289 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 45 "nanoParse.mly"
                                       ( _1 )
# 296 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 47 "nanoParse.mly"
                                       ( Bin(_1,Mul,_3) )
# 304 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 49 "nanoParse.mly"
                                       ( _1 )
# 311 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp2) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 51 "nanoParse.mly"
                                       ( App(_1,_2) )
# 319 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 52 "nanoParse.mly"
                                       ( _1 )
# 326 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 54 "nanoParse.mly"
                                       ( Const _1 )
# 333 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 56 "nanoParse.mly"
                                       ( _2 )
# 340 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 58 "nanoParse.mly"
                                       ( consAtTheEnd NilExpr _1 )
# 347 "nanoParse.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 59 "nanoParse.mly"
                                       ( consAtTheEnd _1      _3 )
# 355 "nanoParse.ml"
               : 'expseq))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
